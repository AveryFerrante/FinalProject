**Welcome to the user manual for wikibooks search engine v1.0**
    - The following three main categories are: Maintenance Mode, Interactive Mode, and Stress Test Mode
    - The ending part of this manual contains information on the classes that make up the search engine program
    - Appendix A can be found after the information about the three modes, but before the class information




-------------------------------------------MAINTENANCE MODE-------------------------------------------
This mode has three main functionalities:
  1. Creating the default index   (option 1)
  2. Adding to the existing index (option 2)
  3. Deleting the existing index  (option 3)


  ****Option 1****

	The default index is created based on the command line arguments passed to the engine upon compile time. The user must have compiled
	with atleast two command line arguments to complete this task. The first argument must be name_of_file.xml where name_of_file
	is the file name for the properly formatted XML file to be parsed and indexed (see appendix A below for XML formatting standards).
	The user can pass in any amount of XML files, but the last command line argument MUST be the stop_words_text_file.txt file where
	stop_words_text_file is the name of a text file containing the list of stop words to be filtered (see appendix A below for stop
	word list formatting).


	This will throw errors for any of the following reasons: Improperly formatted XML file, No stop words text file list, or any file
	passed does not exist within the working directory.
  



  ****Option 2****

	In order to add to the existing index, the user needs only to compile with one command line argument: the stop words text file.
	(NOTE: this will still execute properly if the user has included variable amount of XML files, or none at all, during compilation, 
	the only requirement is that the user has passed a properly formatted stop words text file as the LAST command line argument (see
	appendix A below for stop word list formatting).


	After selecting option 2, the user will be asked to enter the name of the desired XML file to be added. Note, the user may ONLY
	enter one file here. This file must be a properly formatted XML file (see appendix A below for XML formatting standards), and must be 
	inside the working directory. The user MUST include the .xml file extension when inputting the file name (i.e. 'add_file.xml' would be 
	allowed (without the '')). After this step, the program loads the existing index into an AVL-Tree data structure, parses and indexes the 
	new XML file, then rewrites the index including the new file.


	This will throw errors for any of the following reasons: No index files currently exist in the working directory, the XML file entered
	by the user does not exist in the working directory, or the user did not compile with a properly formatted stop words text file.




  ****Option 3****

	This mode does not require any command line arguments. It will never throw an error. It attempts to delete the existing index files in the
	working directory. If none exist, it returns without problem. If they do exist, they are deleted.




-------------------------------------------INTERACTIVE MODE-------------------------------------------
This mode has three main functionalities:
  1. Load from index  (option 1)
  2. Boolean query search (option 2)
  3. Delete the current data structure  (option 3)

  ****Option 1**** 
	Loads the index from the disk into a data structure of the user's choosing, either an AVL tree or a HashTable that uses seperate chaining.
	This must be the first action taken in interactive mode, so that the other operations can be carried out. 

  ****Option 2****
	Searches for any number of words chained together by boolean keywords. The words are "NOT", "AND", and "OR".
	Searching for words 'AND a b' will return documents that contain BOTH a and b. Entering "NOT a b" will return documents that do not contain the word a
	or b. Entering "OR a b" will return documents that contain either word. 15 documents will be displayed after an entry, sorted by relevancy.
	The document with the highest occurence of the word(s) would be first. The NOT keyword may be chained on the end of any form of search. AND & OR MUST be
	at the beginning of each search. The user may also do single word queries.

	Examples:
	AND dog cat mouse NOT farm zoo		- All documents that have atleast one occurance of dog, cat, and mouse, but does not contain farm or zoo
	OR movie popcorn			- Documents that contain either, or both, of the words
	happy NOT anger emotions		- Documents that contain happy, but not anger or emotions

	OR happy sad AND laugh			- This will throw an error for the user to see
	
	The user is responsible for proper spelling/formatting. All words should be lower cased (that is how they are sorted). Also, numeric characters are not
	sorted so if the user enters any as a search term, the engine will return no results.
 
-------------------------------------------STRESS TEST MODE-------------------------------------------

	This Mode only requires a stop words list as a command line argument. It will ask the user to input the name of a file that contains the commands list.
	This file must be inside the working directory and be of file type .txt. See Appendix B for commands / structuring
	




-------------------------------------------Appendix A-------------------------------------------
Proper XML Formatting:





Proper Stop Words List Formatting:

	The stop words list MUST be alphabetized BEFORE being passed in as a command line argument. It cannot contain any capitol letters or punctuation
	(i.e. Can't -> cant). This is becuase during the parsing phase, all words are converted to lower case and any non-alpha character is removed. Only
	add one word per line in the file. Do not put any extra spaces / characters after the word, just press enter. By default, the stop words algorithm 
	uses a binary search. This is the cause for the file to need to be alphabetized prior to running the program. If it is not, the algorithm will only 
	remove stop words by luck. This file can be named anything, but MUST have a .txt file extension.


-------------------------------------------Appendix B-------------------------------------------
Formatting and Instructions for Stress Test Mode:

  Loading from Index( ld )
	The 'ld' command is used for loading a currently existing index into a data structure. After the 'ld' command, the user may enter which of the data
	structures they would like to load into. For hash table, the command is 'ht'. For avl-tree, the command is 'avlt'. See example below for clarificaton.

	Example: To load the index into a hash table, the proper command would be:
		ld ht
	Note: this must be on one line by itsself. No capitol letters, no spacing after the last command / before the first command, single space between the commands.


  Parsing XML files( prse )
	The 'prse' command is used to parse and index a variable amount of properly formatted XML files. This will override the existing index. After the command, the
	user may follow with a space delimited list of .xml files that should be parsed / indexed.
	
	Example: prse file1.xml file2.xml file3.xml random.xml
	This would parse all 4 files, index them, and write this new index to file (overwriting any currently existing index).

  Deleteing Current Index( del )
	This deletes all files that currently make up the index. This has no chance to ever throw an error.

  Adding to the current Index( add )
	This allows the user to enter a space delimited list of .xml files to add to the current index. This will not overwrite the current index. If the user has
	specified a ld command prior to this command, the search engine will parse and index the new files and also add them to the users current structure. If the
	user has not performed a ld command prior, this operation will not leave a data structure in memory, and thus the user must specifiy else where to load a
	data structure.

	Example: add new_file.xml


	**Order DOES play a role in this. If the user attempts to perform commands that require set up, but have not instructed the proper setup, the engine will
	throw errors. Examples of this include attempting to boolean search when there is no structure loaded. Attempting to load from an index when one does not
	exist. Attempting to add to an index when one does not exist.



